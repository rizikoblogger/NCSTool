/**
 * 
 */
package br.com.riziko.ncs;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Instant;
import java.util.HashMap;
import java.util.Properties;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import br.com.riziko.ncs.core.tool.SplitPipes;
import br.com.riziko.ncs.core.tool.TraditionalReader;
import br.com.riziko.ncs.core.tool.TraditionalWriter;
import br.com.riziko.ncs.core.tool.TypeConverter;
import br.com.riziko.ncs.jpa.entity.TCharacteristic;
import br.com.riziko.ncs.jpa.entity.TEntity;
import br.com.riziko.ncs.jpa.entity.TIdentification;
import br.com.riziko.ncs.jpa.entity.TMaterialManagement;
import br.com.riziko.ncs.jpa.entity.TMoeRule;
import br.com.riziko.ncs.jpa.entity.TNote;
import br.com.riziko.ncs.jpa.entity.TPackagingData;
import br.com.riziko.ncs.jpa.entity.TReference;
import br.com.riziko.ncs.jpa.entity.TReplacement;
import br.com.riziko.ncs.jpa.entity.TStandardizationRelationship;
import br.com.riziko.ncs.jpa.entity.TVersioning;

/**
 * @author Rogerio
 * 
 */
public class ScriptRunner {

	static Connection conn;
	static String user;
	static String password;
	static String databaseUri;
	static String catalog;
	static String driver;

	static TVersioning tVersioning;

	/**
	 * This is the Script tools for Database actions.
	 * 
	 * Try java -jar NCSTools.jar -h to see more information.
	 * 
	 * @param args - option file type
	 */
	public static void main(String[] args) {
		
		header();
		init();
		connect();		
		if(args[0].equals("-mommentum")) mommentum();
		importProcedure(args[1]);				
			
	}

	private static void header() {
		__("\n"); //$NON-NLS-1$
		__(Messages.getString("Console.menu.console.header.1")); //$NON-NLS-1$
		__(Messages.getString("Console.menu.console.header.2")); //$NON-NLS-1$
		__(Messages.getString("Console.menu.console.header.3")); //$NON-NLS-1$
		__(Messages.getString("Console.menu.console.header.4")); //$NON-NLS-1$

	}

	private static void init() {

		String USER_HOME = System.getProperty("user.home");
		String SEPARATOR = System.getProperty("file.separator");	
		String FILE_NAME = USER_HOME + SEPARATOR + "NCSDatabaseConnectionParameters.dat";

		try {
			TraditionalReader reader = new TraditionalReader();
			reader.open(FILE_NAME, Charset.forName("UTF-8"));
			__(Messages.getString("Console.connection.existConnectionParameters"));
			reader.close();
		} catch (FileNotFoundException e) {			
			__(Messages.getString("Console.connection.notExistConnectionParameters"));
			TraditionalWriter writer = new TraditionalWriter();
			writer.open(FILE_NAME);
			writer.writeLine("org.h2.Driver|jdbc:h2:tcp://localhost/~/NCSDatabase|NCSDATABASE|sa|null");
			writer.close();			
		}
		
		TraditionalReader reader = new TraditionalReader();		
		try {
			reader.open(FILE_NAME, Charset.forName("UTF-8"));
			String line = reader.readLine();
			reader.close();
			String[] params = SplitPipes.split(line);
			driver = params[0];
			databaseUri = params[1];
			catalog=params[2];
			user=params[3];
			password=params[4];
			
		}catch(FileNotFoundException ex) {
			ex.printStackTrace();
		}
			
	}

	private static boolean connect() {
		
		Properties connectionProps = new Properties();
		connectionProps.put("user", user); //$NON-NLS-1$
		connectionProps.put("password", password); //$NON-NLS-1$
		connectionProps.put("catalog", catalog);

		try {
			Class.forName(driver);
			conn = DriverManager.getConnection(databaseUri, connectionProps);
			__(Messages.getString("Console.connection.connectedTo") + " " + conn.getClientInfo());
				} catch (SQLException e) {
			e.printStackTrace();
			__(Messages.getString("Console.connection.errorOnConnecting"));
					} catch (ClassNotFoundException e) {
			e.printStackTrace();
			__(Messages.getString("Console.connection.driverNotFound:" + driver));
			
		}
		return true;
	}

	private static void createTIRDatabase() {
		init();
		connect();
		try {
			HashMap<String,StringBuilder> sql = new HashMap<String, StringBuilder>();
			sql.put("Select", new StringBuilder("Select * from "+tVersioning.getClass().getName()));			
			boolean success = insertIntoDatabase(sql);	
			if (success)
				__(Messages.getString("Console.info.success"));
			if (!success)
				__(Messages.getString("Console.info.failure"));
		} catch (Exception e) {
			boolean success = insertIntoDatabase(createTIR());		
			if (success)
				__(Messages.getString("Console.info.success"));
			if (!success)
				__(Messages.getString("Console.info.failure"));
		}		
		
	}

	private static boolean startVersioning() {
		try {
			Instant today = Instant.now();
			tVersioning = new TVersioning();
			Scanner keyboard = new Scanner(System.in);
			
			__(Messages.getString("Console.versioning.inputVersionNumber"));
			int version = Long.valueOf(keyboard.next()).intValue();
			tVersioning.setVersion(version);
			
			__(Messages.getString("Console.versioning.inputDateofSSR") + "[" + today + "]");
			Instant dateOfSSR = Instant.parse(keyboard.next());
			tVersioning.setDateOfSSR(dateOfSSR);
			
			__(Messages.getString("Console.versioning.inputDateofMRD") + "[" + today + "]");
			Instant dateOfMRD = Instant.parse(keyboard.next());
			tVersioning.setDateOfMRD(dateOfMRD);
			
			__(Messages.getString("Console.versioning.inputDateofKHN") + "[" + today + "]");
			Instant dateOfKHN = Instant.parse(keyboard.next());
			tVersioning.setDateOfKHN(dateOfKHN);
			
			__(Messages.getString("Console.versioning.inputDateofKFF") + "[" + today + "]");
			Instant dateOfKFF = Instant.parse(keyboard.next());
			tVersioning.setDateOfKFF(dateOfKFF);
			
			tVersioning.setId(Instant.now().getEpochSecond());
			tVersioning.setNoteOfVersion("Import from NCSTools/ScriptRunner.");
			
			keyboard.close();
			HashMap<String, StringBuilder> list = new HashMap<>();
			
			StringBuilder creationCommand = TypeConverter.toDDL(tVersioning);
			list.put(tVersioning.getClass().getName(), creationCommand);
			try {				
				insertIntoDatabase(list);				
			} catch (Exception e) {
				e.printStackTrace();
				__(":-O, Try to start the database first!!");
				return false;
			}			
			StringBuilder insertCommand = TypeConverter.toSQL(tVersioning);
			list.put(tVersioning.getClass().getName(), insertCommand);
			try {				
				insertIntoDatabase(list);				
			} catch (Exception e) {
				e.printStackTrace();
				__(":-O, SQL Commands generated are not compatible with database dialect!!");
				return false;
			}
		} catch (Exception e) {
			__(Messages.getString("Console.versioning.errorOnParsingDate"));
			return false;
		}
		return true;
	}


	private static void importProcedure(String fileName) {
		String line = "";
		HashMap<String, StringBuilder> lista = new HashMap<>();
		TraditionalReader reader = new TraditionalReader();

		try {
			reader.open(fileName, Charset.forName("UTF-8"));
			while ((line = reader.readLine()) != null) {
				lista.put(line, new StringBuilder(line));
			}
			insertIntoDatabase(lista);
		} catch (IOException e) {
			e.printStackTrace();
			__(Messages.getString("Console.info.failure"));
		}

	}

	/**
	 * DELETE and UPDATE commands will be avoided
	 * @param hashMap
	 * @return
	 */
	private static boolean insertIntoDatabase(HashMap<String, StringBuilder> hashMap) {
		
		boolean success = true;
		HashMap<String, StringBuilder> tables = hashMap;
		__(Messages.getString("Console.menu.content.explanation.1") + Instant.now()); //$NON-NLS-1$
		Stream<StringBuilder> stream = tables.values().stream();

		for (StringBuilder sb : stream.collect(Collectors.toList())) {

			try {
				Statement stmt = conn.createStatement();
				String sql = sb.toString();
				if (!sql.startsWith("DELETE") && !sql.startsWith("UPDATE"))
					stmt.executeUpdate(sql);
				__("- " + sql);
				stmt.close();
			} catch (SQLException se) {
				se.printStackTrace();
				success = false;
				
			}

		}
		__(Messages.getString("Console.menu.content.explanation.2") + Instant.now());
		return success;
	}
	
	private static HashMap<String, StringBuilder> createTIR(){
		HashMap<String, StringBuilder> tables = new HashMap<>();		
		tables.put(TCharacteristic.class.getName(),TypeConverter.toDDL(new TCharacteristic()));
		tables.put(TEntity.class.getName(),TypeConverter.toDDL(new TEntity()));
		tables.put(TIdentification.class.getName(),TypeConverter.toDDL(new TIdentification()));
		tables.put(TMaterialManagement.class.getName(),TypeConverter.toDDL(new TMaterialManagement()));
		tables.put(TMoeRule.class.getName(),TypeConverter.toDDL(new TMoeRule()));
		tables.put(TNote.class.getName(),TypeConverter.toDDL(new TNote()));
		tables.put(TPackagingData.class.getName(),TypeConverter.toDDL(new TPackagingData()));
		tables.put(TReference.class.getName(),TypeConverter.toDDL(new TReference()));
		tables.put(TReplacement.class.getName(),TypeConverter.toDDL(new TReplacement()));
		tables.put(TStandardizationRelationship.class.getName(),TypeConverter.toDDL(new TStandardizationRelationship()));
		tables.put(TVersioning.class.getName(), TypeConverter.toDDL(new TVersioning()));
		return tables;		
	}
	
	private static void mommentum() {
		//TODO: After creating all tables in database
		createTIRDatabase();
		startVersioning();
		try {
			ResultSet result = conn.createStatement().executeQuery("select * from " + "SegmentA");			
			ResultSetMetaData meta = result.getMetaData();
			TIdentification tIdentification = new TIdentification();
			do {
				result.next();
				tIdentification.setApprovedItemName5010(result.getNString("AIN5010 "));
			}while(!result.isLast());
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	
	private static void __(String text) {
		System.out.println(text);
	}
	

}
